buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath group: 'org.zeroturnaround', name: 'gradle-jrebel-plugin', version: '1.1.3'
        classpath group: 'pl.allegro.tech.build', name: 'axion-release-plugin', version: '1.3.5'
    }
}

apply plugin: 'pl.allegro.tech.build.axion-release'

scmVersion {
    tag {
        prefix = 'hoopoe-profiler'
        initialVersion = { tag, position -> '0.1.0-alpha1' }
    }
    hooks {
        pre {context -> ext.releaseVersion = context.currentVersion}
    }
}

ext.releasing = gradle.startParameter.taskNames.contains('release')

allprojects {
    group 'hoopoe-profiler'

    repositories {
        mavenCentral()
    }

    project.version = scmVersion.version

    configurations {
        provided
        compile.extendsFrom provided
        hoopoe
    }
}

subprojects {

    plugins.withType(JavaPlugin) {
        plugins.apply(JacocoPlugin)
    }

    afterEvaluate {  project ->
        project.tasks.withType(Test) {
            it.testLogging {
                it.exceptionFormat = 'full'
                it.events = ['failed']
            }
        }

        project.tasks.withType(JacocoReport) {
            it.reports.xml.enabled = true;
            it.reports.html.enabled = false;
            project.tasks.findByName('check').dependsOn(it)
        }

        def generateRebelTask = project.tasks.findByName('generateRebel')
        if (generateRebelTask) {
           generateRebelTask.onlyIf { !releasing }
        }

        if (!releasing) {
            project.tasks.withType(Jar) {
                if (generateRebelTask) {
                    dependsOn(generateRebelTask)
                }
            }
        }

        project.tasks.withType(JavaCompile) {
            options.compilerArgs << '-nowarn'
            sourceCompatibility = 1.8
        }

        def assembleTask = project.tasks.findByName('assemble')
        project.parent.tasks.releaseAssemble.dependsOn(assembleTask)
        assembleTask.dependsOn(project.parent.tasks.releaseClean)

        project.tasks.withType(Test) {
            project.parent.tasks.releaseTests.dependsOn(it)
        }

        project.parent.tasks.releaseClean.dependsOn(project.tasks.findByName('clean'))

        def binTrayTask = project.tasks.findByName('bintrayUpload');
        if (binTrayTask) {
            binTrayTask.dependsOn(project.parent.tasks.releaseTag)
            project.parent.tasks.releasePush.dependsOn(binTrayTask)
        }

    }
}

task wrapper(type: Wrapper) {
  distributionUrl = 'https://services.gradle.org/distributions/gradle-2.14-bin.zip'
}

tasks.remove(tasks.findByName('release'));
task releaseClean()
task releaseAssemble()
tasks.releaseAssemble.dependsOn(tasks.releaseClean)
tasks.releaseAssemble.mustRunAfter(tasks.verifyRelease)
task releaseTests() {
    dependsOn tasks.releaseAssemble
}
task releaseTag() {
    dependsOn tasks.releaseTests, tasks.createRelease
}
tasks.releaseTag.doLast({
    subprojects.tasks.each {
        def binTrayTask = it.findByName('bintrayUpload')
        if (binTrayTask) {
            binTrayTask.versionName = ext.releaseVersion
            binTrayTask.versionVcsTag = ext.releaseVersion
        }
    }
})
tasks.createRelease.dependsOn(tasks.verifyRelease, tasks.releaseTests)
task releasePush() {
   dependsOn tasks.releaseTag
}
tasks.pushRelease.dependsOn(tasks.releasePush)
task release() {
    dependsOn tasks.pushRelease
}