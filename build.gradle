buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.zeroturnaround:gradle-jrebel-plugin:1.1.4"
        classpath "pl.allegro.tech.build:axion-release-plugin:1.4.1"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.13.0"
    }
}

apply plugin: 'pl.allegro.tech.build.axion-release'
apply plugin: 'com.github.ben-manes.versions'

ext.libraries = [
        slf4j       : 'org.slf4j:slf4j-api:1.7.22',
        commonsLang3: 'org.apache.commons:commons-lang3:3.5',
        commonsIo   : 'commons-io:commons-io:2.5',
        byteBuddy   : 'net.bytebuddy:byte-buddy:1.7.6',
        logback     : 'ch.qos.logback:logback-classic:1.1.8',
        // todo: IDEA does not see annotation processor when upgraded to later versions
        lombok      : 'org.projectlombok:lombok:1.14.8',
        junit       : [
                'junit:junit:4.12',
                'com.tngtech.java:junit-dataprovider:1.12.0'
        ],
        mockito     : 'org.mockito:mockito-core:2.8.9',
        hamcrest    : 'org.hamcrest:hamcrest-all:1.3',
        guava       : 'com.google.guava:guava:21.0',
        snakeyaml   : 'org.yaml:snakeyaml:1.18'
]

ext.libraries.commonTestDependencies = [
        libraries.junit, libraries.hamcrest, libraries.mockito
]

scmVersion {
    tag {
        prefix = 'hoopoe-profiler'
        initialVersion = { tag, position -> '0.1.0-alpha1' }
    }
    versionIncrementer 'incrementPrerelease'
    hooks {
        pre { context ->
            project.ext.set('releaseVersion', context.currentVersion)
            println "Releasing $project.ext.releaseVersion"
        }
    }
    checks {
        uncommittedChanges = true
        aheadOfRemote = false
    }
}

ext.releasing = gradle.startParameter.taskNames.contains('release')

allprojects {
    group 'hoopoe-profiler'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    project.version = scmVersion.version

    configurations {
        hoopoe
        itestCompile.extendsFrom testCompile
        itestRuntime.extendsFrom testRuntime
    }
}

subprojects {

    plugins.withType(JavaPlugin) {
        plugins.apply(JacocoPlugin)

        sourceSets{itest {
                compileClasspath += sourceSets["main"].output
                runtimeClasspath += sourceSets["main"].output}
            }

        tasks.create("integration-tests", Test) {
            testClassesDirs = sourceSets.itest.output.classesDirs
            classpath = sourceSets.itest.runtimeClasspath
        }
    }

    afterEvaluate { project ->

        project.tasks.withType(Test) {
            testLogging {
                showStandardStreams = true
                events "passed", "skipped", "failed", "standardOut"
                showExceptions true
                showCauses true
                showStackTraces true
                exceptionFormat "full"

                afterSuite { desc, result ->
                    if (!desc.parent) { // will match the outermost suite
                        println '------'
                        println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} " +
                                "successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                        println '------'
                    }
                }
            }
        }

        project.tasks.withType(JacocoReport) {
            it.reports.xml.enabled = true;
            it.reports.html.enabled = false;
            project.tasks.findByName('check').dependsOn(it)
        }

        def generateRebelTask = project.tasks.findByName('generateRebel')
        if (generateRebelTask) {
            generateRebelTask.onlyIf { !releasing }
        }

        if (!releasing) {
            project.tasks.withType(Jar) {
                if (generateRebelTask) {
                    dependsOn(generateRebelTask)
                }
            }
        }

        project.tasks.withType(JavaCompile) {
            options.compilerArgs << '-nowarn'
            sourceCompatibility = 1.8
        }

        def assembleTask = project.tasks.findByName('assemble')
        project.parent.tasks.releaseAssemble.dependsOn(assembleTask)
        assembleTask.dependsOn(project.parent.tasks.releaseClean)

        project.tasks.withType(Test) {
            project.parent.tasks.releaseTests.dependsOn(it)
        }

        project.parent.tasks.releaseClean.dependsOn(project.tasks.findByName('clean'))

        def binTrayTask = project.tasks.findByName('bintrayUpload');
        if (binTrayTask) {
            binTrayTask.dependsOn(project.parent.tasks.releaseTag)
            project.parent.tasks.releaseUpload.dependsOn(binTrayTask)

            project.bintray.user = System.getenv('BINTRAY_USER')
            project.bintray.key = System.getenv('BINTRAY_KEY')
            project.bintray.pkg.repo = 'hoopoe-profiler'
            project.bintray.pkg.version.name = "$project.version"
            project.bintray.pkg.version.vcsTag = "hoopoe-profiler-$project.version"
            project.bintray.pkg.version.released = new Date()
        }

    }
}

task wrapper(type: Wrapper) {
    distributionUrl = 'https://services.gradle.org/distributions/gradle-4.2.1-all.zip'
}

tasks.remove(tasks.findByName('release'));
task releaseClean()
tasks.verifyRelease.dependsOn(tasks.releaseClean)
task releaseAssemble()
tasks.releaseAssemble.dependsOn(tasks.verifyRelease)
task releaseTests()
tasks.releaseTests.dependsOn(tasks.releaseAssemble)
task releaseTag()
tasks.releaseTag.dependsOn(tasks.releaseTests, tasks.createRelease)
tasks.releaseTag.doLast({
    subprojects.tasks.each {
        def binTrayTask = it.findByName('bintrayUpload')
        if (binTrayTask) {
            binTrayTask.versionName = project.ext.releaseVersion
            binTrayTask.versionVcsTag = "hoopoe-profiler-$project.ext.releaseVersion"
        }
    }
})
tasks.createRelease.dependsOn(tasks.verifyRelease, tasks.releaseTests)
task releaseUpload()
tasks.releaseUpload.dependsOn(tasks.releaseTag)
task release()
tasks.release.dependsOn(tasks.releaseUpload)